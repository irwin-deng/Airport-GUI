import java.util.*;
import java.io.*;
import com.opencsv.CSVReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.text.*;
import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author Irwin
 */
public class AirportGUI extends javax.swing.JFrame {

    public boolean airport1Submitted;
    public boolean airport2Submitted;
    public int airport1;
    public int airport2;
    public double[] midpointLongitudes;
    public double[] midpointLatitudes;
    public double distance;
    
    public BaseAirport airports[];
    /**
     * Creates new form AirportGUI
     * @throws java.lang.Exception
     */
    public AirportGUI() throws Exception {
        airport1Submitted = false;
        airport2Submitted = false;
        openCSV();
        initComponents();
        midpointLongitudes = new double[2049];
        midpointLatitudes = new double[2049];
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        map = new javax.swing.JLabel();
        textInput = new javax.swing.JTextField();
        submitText = new javax.swing.JButton();
        latLabel = new javax.swing.JLabel();
        latText = new javax.swing.JLabel();
        longLabel = new javax.swing.JLabel();
        longText = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textInput1 = new javax.swing.JTextField();
        submitText1 = new javax.swing.JButton();
        latLabel1 = new javax.swing.JLabel();
        latText1 = new javax.swing.JLabel();
        longLabel1 = new javax.swing.JLabel();
        longText1 = new javax.swing.JLabel();
        distanceLabel = new javax.swing.JLabel();
        distanceText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        map.setIcon(new javax.swing.ImageIcon(getClass().getResource("resources/world equirectangular.png"))); // NOI18N

        textInput.setText("Enter IATA code here");
        textInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInputActionPerformed(evt);
            }
        });

        submitText.setText("Go!");
        submitText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitTextActionPerformed(evt);
            }
        });

        latLabel.setText("Latitude:");

        longLabel.setText("Longitude:");

        jLabel1.setText("Airport 1:");

        jLabel2.setText("Airport 2:");

        textInput1.setText("Enter IATA code here");
        textInput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInput1ActionPerformed(evt);
            }
        });

        submitText1.setText("Go!");
        submitText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitText1ActionPerformed(evt);
            }
        });

        latLabel1.setText("Latitude:");

        longLabel1.setText("Longitude:");

        distanceLabel.setText("Distance:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(map)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textInput1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(31, 31, 31)
                                .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitText)
                            .addComponent(submitText1))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(latLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(latText))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(latLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(latText1)))
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(longLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(longText))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(longLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(longText1)))
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(distanceText)
                            .addComponent(distanceLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(map)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitText)
                    .addComponent(latLabel)
                    .addComponent(latText)
                    .addComponent(longLabel)
                    .addComponent(longText)
                    .addComponent(jLabel1)
                    .addComponent(distanceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(latText1)
                    .addComponent(latLabel1)
                    .addComponent(submitText1)
                    .addComponent(textInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(longLabel1)
                    .addComponent(longText1)
                    .addComponent(distanceText))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textInputActionPerformed

    private void submitTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitTextActionPerformed
        airport1Submitted = true;
        String text = textInput.getText();
        airport1 = searchByIata(text);
        latText.setText(Double.toString(airports[airport1].getLatitude()));
        longText.setText(Double.toString(airports[airport1].getLongitude()));
        midpointLatitudes[0] = airports[airport1].getLatitude();
        midpointLongitudes[0] = airports[airport1].getLongitude();
        repaint();
        DecimalFormat numberFormat = new DecimalFormat("#.##");
        if(airport2Submitted) {
            distance = calculateDistance(airports[airport1].getLatitude(), airports[airport1].getLongitude(), airports[airport2].getLatitude(), airports[airport2].getLongitude());
            distanceText.setText(numberFormat.format(distance) + " miles");
            findMidpoints();
        }
    }//GEN-LAST:event_submitTextActionPerformed

    private void textInput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInput1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textInput1ActionPerformed

    private void submitText1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitText1ActionPerformed
        airport2Submitted = true;
        String text = textInput1.getText();
        airport2 = searchByIata(text);
        latText1.setText(Double.toString(airports[airport2].getLatitude()));
        longText1.setText(Double.toString(airports[airport2].getLongitude()));
        midpointLatitudes[midpointLatitudes.length-1] = airports[airport2].getLatitude();
        midpointLongitudes[midpointLatitudes.length-1] = airports[airport2].getLongitude();
        repaint();
        DecimalFormat numberFormat = new DecimalFormat("#.##");
        if(airport1Submitted) {
            distance = calculateDistance(airports[airport1].getLatitude(), airports[airport1].getLongitude(), airports[airport2].getLatitude(), airports[airport2].getLongitude());
            distanceText.setText(numberFormat.format(distance) + " miles");
            findMidpoints();
        }
    }//GEN-LAST:event_submitText1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new AirportGUI().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(AirportGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }
    
    // reads airports.csv
    public void openCSV() throws Exception {
        InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream("resources/airports.csv");
        CSVReader reader = new CSVReader(new InputStreamReader(in));
        List<String[]> list = reader.readAll();
        String[][] dataArr = new String[list.size()][7];
        dataArr = list.toArray(dataArr);
        int airportCount = dataArr.length-1;
        airports = new BaseAirport[airportCount-1];
        for(int i = 1; i < airportCount; i++) {
            airports[i-1] = new BaseAirport(dataArr[i][0],  //name
                Double.parseDouble(dataArr[i][1]),          //lat
                Double.parseDouble(dataArr[i][2]),          //long
                Double.parseDouble(dataArr[i][3]),          //elevation
                dataArr[i][4],                              //country
                dataArr[i][5],                              //municipality
                dataArr[i][6]);                             //iata
        }
    }
    
    // iteratively find midpoints
    public void findMidpoints() {
        for(int i = (midpointLatitudes.length-1)/2; i > 0; i/=2) {
            for(int j = i; j < midpointLatitudes.length - 1; j+= i*2)
                findMidpoint(j, midpointLatitudes[j-i], midpointLatitudes[j+i], midpointLongitudes[j-i], midpointLongitudes[j+i]);
        }
    }

    public void findMidpoint(int indx, double lat1, double lat2, double long1, double long2) {
        double deltaLong = Math.toRadians(long2-long1);
        lat1 = Math.toRadians(lat1);
        lat2 = Math.toRadians(lat2);
        long1 = Math.toRadians(long1);

        double Bx = Math.cos(lat2) * Math.cos(deltaLong);
        double By = Math.cos(lat2) * Math.sin(deltaLong);
        double lat3 = Math.atan2(Math.sin(lat1) + Math.sin(lat2), Math.sqrt((Math.cos(lat1) + Bx) * (Math.cos(lat1) + Bx) + By * By));
        double long3 = long1 + Math.atan2(By, Math.cos(lat1) + Bx);
        if(long3 < -Math.PI)
            long3 += 2 * Math.PI;
        if(long3 > Math.PI)
            long3 -= 2 * Math.PI;
        
        midpointLatitudes[indx] = Math.toDegrees(lat3);
        midpointLongitudes[indx] = Math.toDegrees(long3);
    }

    public int searchByIata(String str) {
        for(int i=0; i<airports.length; i++)
        {
            if(str.equals(airports[i].getIata()))
                return i;
        }
        return 0;
    }
    
    public double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
        final double R = 3959;
        double dLat = Math.toRadians(lat2 - lat1);
        double dLon = Math.toRadians(lon2 - lon1);
        lat1 = Math.toRadians(lat1);
        lat2 = Math.toRadians(lat2);
 
        double a = Math.pow(Math.sin(dLat / 2),2) + Math.pow(Math.sin(dLon / 2),2) * Math.cos(lat1) * Math.cos(lat2);
        double c = 2 * Math.asin(Math.sqrt(a));
        return R * c;
    }

    public void paint(Graphics g)
    {
        super.paint(g);
        g.setColor(Color.RED);
        if(airport1Submitted)
            g.fillOval((int)((airports[airport1].getLongitude()+180)*2.84)+10,(int)((-1*airports[airport1].getLatitude()+90)*2.85)+32,10,10);
        if(airport2Submitted)
            g.fillOval((int)((airports[airport2].getLongitude()+180)*2.84)+10,(int)((-1*airports[airport2].getLatitude()+90)*2.85)+32,10,10);
        if(airport1Submitted && airport2Submitted)
            for(int i = 1; i < midpointLongitudes.length; i++) {
                g.fillOval((int)((midpointLongitudes[i]+180)*2.84)+13,(int)((-1*midpointLatitudes[i]+90)*2.85)+35,4,4);
                try {
                    Thread.sleep((int)distance/6000+1);
                } 
                catch(Exception e) {
                }
            }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel distanceLabel;
    private javax.swing.JLabel distanceText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel latLabel;
    private javax.swing.JLabel latLabel1;
    private javax.swing.JLabel latText;
    private javax.swing.JLabel latText1;
    private javax.swing.JLabel longLabel;
    private javax.swing.JLabel longLabel1;
    private javax.swing.JLabel longText;
    private javax.swing.JLabel longText1;
    private javax.swing.JLabel map;
    private javax.swing.JButton submitText;
    private javax.swing.JButton submitText1;
    private javax.swing.JTextField textInput;
    private javax.swing.JTextField textInput1;
    // End of variables declaration//GEN-END:variables
}
